<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chronicles of a Junior Dev</title>
    <description></description>
    <link>http://localhost:4000/chronicles/</link>
    <atom:link href="http://localhost:4000/chronicles/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 Oct 2017 08:01:55 -0700</pubDate>
    <lastBuildDate>Mon, 23 Oct 2017 08:01:55 -0700</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>Rejection &amp; Revision</title>
        <description>&lt;p&gt;One of my goals for 2018 is to speak at more tech conferences.&lt;/p&gt;

&lt;p&gt;Although I gave talks at &lt;a href=&quot;http://selfconference.org/sessions#speaker_298&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://werise.tech/sessions/2017/5/30/build-her-up-on-supporting-university-women-in-tech&quot;&gt;conferences&lt;/a&gt; in 2017, the call for proposals (CFP) process still feels opaque to me. Submitting a talk proposal to CFP reviewers is like dropping a letter into the void: usually, the only contact I receive from the reviewers or organizers about my proposal is an email stating whether they accepted or rejected my talk.&lt;/p&gt;

&lt;p&gt;Newcomers to the technical speaking circuit haven’t mastered the CFP process yet. Receiving so little feedback – an auto-generated rejection most of the time – leaves them without a clear path to improve their proposal for the next CFP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For an industry that prides itself on iterative development, the black box nature of CFPs feels particularly egregious to me&lt;/strong&gt;. If a conference wishes to invest in scouting fresh technical speaking talent, feedback besides (and even before!) acceptance or rejection should be high priority.&lt;/p&gt;

&lt;p&gt;Despite the flaws of the CFP process, I have developed strategies to turn the rejections I receive into better proposals. I’ll share the steps I took to turn my most recent rejections into revisions in the hopes that it will assuage the discouragement of speaker-hopefuls (like you!) and provide them with actions that they can take to improve their talk proposals.&lt;/p&gt;

&lt;h2 id=&quot;ask-for-feedback&quot;&gt;Ask for Feedback&lt;/h2&gt;

&lt;p&gt;I emailed two conference organizers asking for their reviewers’ feedback on my proposal. Both organizers were quite willing to share this information with me.&lt;/p&gt;

&lt;p&gt;Before I provide excerpts of this feedback, I’d like to introduce a framework that I use to sift the useful feedback and discard the fluff: &lt;a href=&quot;https://twitter.com/lara_hogan&quot;&gt;Lara Hogan&lt;/a&gt;’s card suits. In her book &lt;em&gt;Demystifying Public Speaking&lt;/em&gt;, she elaborates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hearts: “feedback that is positive, but not specific”&lt;/li&gt;
  &lt;li&gt;Diamonds: “feedback that is positive, and specific or actionable”&lt;/li&gt;
  &lt;li&gt;Clubs: “feedback that is negative, but not specific or constructive”&lt;/li&gt;
  &lt;li&gt;Spades: “feedback that is negative, but gives specific suggestions”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;After receiving a rejection, speakers and speakers-to-be should seek diamonds and spades from the organizers&lt;/strong&gt;. I’ll categorize some of the feedback I received for my rejected talk proposal:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The audience participation section feels like something that would work great in a small meetup group or a tutorial session at a larger conference, but probably won’t go quite as well in a 400-person single-track event.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I consider this feedback a diamond. As someone who has never spoken in front of a 400-person audience, it would be impossible for me to ascertain this fact without the wisdom of a seasoned conference speaker or organizer. This ill-placed audience participation could mark me as unprepared to give this talk, which is untrue. I have since removed this section from my talk proposal.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“[Topic] was not a topic that we saw other people submitting talks about. That is also a great feather in your cap for the uniqueness factor.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I consider this feedback a heart. When speaking with this organizer, it was clear that the reviewers liked my proposal, but not enough to select it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I think restructuring the talk/proposal to show evidence of why… [would make] you and your material sound more authoritative than anecdotal.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I consider this feedback a diamond or spade, depending on how negatively the organizer connotes the word “anecdotal.” I have since cut out any weak language in my talk proposal and put more emphasis on explaining the why.&lt;/p&gt;

&lt;p&gt;I’m grateful to these conference organizers for providing me with mostly diamonds – feedback that I can use. When asking for feedback on a rejected talk proposal, push for those diamonds and spades.&lt;/p&gt;

&lt;h2 id=&quot;look-to-the-abstract&quot;&gt;Look to the Abstract&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Of all the sections of a talk proposal, the abstract is the canary in the coal mine&lt;/strong&gt;. If the abstract is bad – meaning unclear, illogical, or underdeveloped – then the rest of the proposal probably follows suit.&lt;/p&gt;

&lt;p&gt;Before I continue talking about the abstract, I’d like to outline the anatomy of a talk proposal. Typically, it has these three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Abstract&lt;/strong&gt;: short, elevator pitch that motivates the talk and summarizes the desired outcome&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: talk outline&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Notes&lt;/strong&gt;: any additional information, especially why &lt;em&gt;this&lt;/em&gt; speaker should give &lt;em&gt;this&lt;/em&gt; talk at &lt;em&gt;this&lt;/em&gt; conference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the abstract is often the first thing an organizer or reviewer sees on a talk proposal, it sets up their perception of a given talk. Even though abstracts tend to be looked at first, they should be written last: as in &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3136027/&quot;&gt;scientific research papers&lt;/a&gt;, abstracts act as introduction, content summary, and conclusion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best way for a speaker-hopeful to vet and improve their abstract is, paradoxically, to elucidate their talk description&lt;/strong&gt;. Writing a razor-sharp description can help the speaker determine the biggest selling points of their talk, which is exactly what they should share in the abstract. I’ll discuss honing the talk description more in the next section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speakers can also ameliorate their abstract by tailoring it to the unique traits of a conference&lt;/strong&gt;. If a speaker-hopeful wishes to present at a Ruby conference, then their abstract should include how their talk benefits Ruby developers. Even language-agnostic conferences have traits that a speaker can reflect in their abstract – all it takes is a little research to find their quirks! Tailoring an abstract to a conference can convince reviewers of the talk’s value-add for their audience.&lt;/p&gt;

&lt;p&gt;The abstract that I submitted to conferences in September and October was, admittedly, not a good reflection of my talk description. It also was not tailored to the special characteristics of each conference. My abstract – and overall proposal – feels much more polished now that I have addressed these flaws. But, in order for me to strengthen my abstract, I first had to edit my description.&lt;/p&gt;

&lt;h2 id=&quot;whittle-down-to-the-essentials&quot;&gt;Whittle Down to the Essentials&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, the talk description influences the direction an abstract should take. &lt;strong&gt;An airtight talk description leads to an airtight abstract&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The description section of my rejected proposal was thorough but lacked direction. I was trying to sell the audience on a thesis muddled by too many arguments.&lt;/p&gt;

&lt;p&gt;When I put together slides to give this talk at a meetup, I leaned on one of these arguments more heavily than others. This made me realize that my talk description didn’t accurately reflect what I wanted to talk talk about. Instead of including every possible argument for my thesis, I rewrote my description with a focus on one.&lt;/p&gt;

&lt;p&gt;My choice to narrow the scope of this talk was validated at the meetup: attendees loved the clear cause-and-effect relationship that I presented. Confidently settling on a focal point for my talk also helped me eliminate wishy-washy language in my description, and as you can imagine, whittling down my talk description helped me write a stronger abstract for the next round of CFPs.&lt;/p&gt;

&lt;p&gt;But not every speaker-hopeful has taken the opportunity to practice their talk in front of an audience before applying to speak at conferences. &lt;strong&gt;Another technique that speakers use to find the linchpin of their proposed talk is the conclusion framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I learned about the conclusion framework from &lt;a href=&quot;https://twitter.com/goinggodotnet&quot;&gt;Bill Kennedy&lt;/a&gt;. He shared it with me as an exercise for succinctly expressing the purpose of my talk.&lt;/p&gt;

&lt;p&gt;Here’s my take on the conclusion framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I believe… [thesis]&lt;/li&gt;
  &lt;li&gt;I have shown you… [argument(s) that support thesis]&lt;/li&gt;
  &lt;li&gt;We now both agree on… [reworded thesis]&lt;/li&gt;
  &lt;li&gt;Go forth and… [call to action]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I recommend that every speaker-hopeful fill in these four sentences at least once per talk proposal. The conclusion framework acts as the speaker-hopeful’s North Star: it will keep them on track as they revise their abstract and description.&lt;/p&gt;

&lt;h2 id=&quot;try-a-meetup&quot;&gt;Try a Meetup&lt;/h2&gt;

&lt;p&gt;Although talk proposals can be revised alone, &lt;strong&gt;there’s nothing like presenting a talk in front of an audience to discover where a talk shines and where it flops&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When speaking at a meetup – especially a more intimate one – I preface my talk with instructions for my audience: feedback, please! I share my Twitter handle on every slide in my deck to encourage audience members to reach out. In the parlance of card suits, those who tweet at me usually share hearts.&lt;/p&gt;

&lt;p&gt;To dig for more diamonds and spades, after the conclusion and Q&amp;amp;A I like to ask the audience some questions of my own beyond “Any thoughts?”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Do you have any criticisms of my talk?”&lt;/li&gt;
  &lt;li&gt;“How did you feel about [slide]”?&lt;/li&gt;
  &lt;li&gt;“Was there anything I said that didn’t feel clear?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One diamond I received at a meetup was that I sometimes use uncommon words – English words, not jargon – on my slides. Given that my talk deals with words more than code, utilizing language that will keep the audience engaged matters deeply to me. I never would have received this feedback without presenting in front of audience members who don’t speak the way I do.&lt;/p&gt;

&lt;p&gt;Finding a meetup to speak at seems like it would be just as daunting as submitting talk proposals to conferences, but it’s been so much more relaxed in my experience. I search &lt;a href=&quot;https://www.meetup.com/&quot;&gt;Meetup&lt;/a&gt; for meetups in my area that interest me and email the organizer(s) to see if they have any open speaking opportunities.&lt;/p&gt;

&lt;h2 id=&quot;keep-submitting&quot;&gt;Keep Submitting&lt;/h2&gt;

&lt;p&gt;At the end of the day, there’s only one way for a newcomer to speak at a conference: &lt;strong&gt;by continuing to submit talk proposals to conferences&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I hope that, by sharing with you – the speaker-hopeful – how I bounced back from my recent talk proposal rejections, you feel empowered to improve your talk proposals and own the next round of CFPs. Anytime you feel discouraged by rejection, remember that you can channel that negativity into actions that make your talk even better.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://abookapart.com/products/demystifying-public-speaking&quot;&gt;Demystifying Public Speaking&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/lara_hogan&quot;&gt;Lara Hogan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://helpmeabstract.com/&quot;&gt;HelpMeAbstract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.likeagirl.io/on-conference-proposal-rejections-205f7fead68&quot;&gt;On conference proposal rejections&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/limedaring&quot;&gt;Tracy Osborn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sarahmei.com/blog/2014/04/07/what-your-conference-proposal-is-missing/&quot;&gt;What Your Conference Proposal Is Missing&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sarahmei&quot;&gt;Sarah Mei&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;Thank you to everyone – and I am fortunate there are so many of you! – who has helped me navigate the labyrinthine world of technical speaking. This blog post wouldn’t have happened without your support.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy what you read? Spread the love by sharing this piece. Have thoughts or questions? Reach out to me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt; or in the comments below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Oct 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/10/23/rejection-revision.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/10/23/rejection-revision.html</guid>
        
        
      </item>
    
      <item>
        <title>How do you like them Apples?</title>
        <description>&lt;p&gt;I kicked off my career at Medium as an iOS software engineer. This has come as a surprise to many of my friends, who know how much I love playing with Python and that I’ve exclusively written HTML, CSS, and JavaScript in my internships and open source contributions.&lt;/p&gt;

&lt;p&gt;So why am I doing iOS development? I want to dabble in a broad array of engineering roles before I make a deep dive into any one of them. I once wrote Swift code for a &lt;a href=&quot;http://dtr.northwestern.edu/projects/expanding_citizen_science_&quot;&gt;zombie running app&lt;/a&gt; in Northwestern’s Delta Lab: that taste of iOS development convinced me to give it a try in production.&lt;/p&gt;

&lt;p&gt;Over seven weeks at Medium, I’ve climbed the steep learning curve to working competency in iOS development. I’ll chronicle (back at it with the puns!) my journey, and share with you my thoughts on iOS programming from the lens of a web developer.&lt;/p&gt;

&lt;h2 id=&quot;paradigm-shift&quot;&gt;Paradigm Shift&lt;/h2&gt;

&lt;p&gt;When I first opened up Medium’s iOS codebase, I felt like I had just woken up in an alternate reality. Methods were suddenly called messages. Classes were outnumbered by interfaces, protocols, and properties – whatever those meant. Syntax drowned in square brackets.&lt;/p&gt;

&lt;p&gt;So went my introduction to Objective-C. Although it is in the C family of programming languages – which I am familiar with – it borrows from &lt;a href=&quot;https://en.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;, a language implemented in the object-oriented and &lt;a href=&quot;https://rosettacode.org/wiki/Category:Programming_paradigm/Reflective&quot;&gt;reflective&lt;/a&gt; programming paradigms. The term “paradigm shift” &lt;em&gt;literally&lt;/em&gt; applies here.&lt;/p&gt;

&lt;p&gt;I spent my first week adjusting to the stylistic choices and best practices behind Objective-C programming. Reading this &lt;a href=&quot;http://cocoadevcentral.com/d/learn_objectivec/&quot;&gt;Objective-C cheat sheet&lt;/a&gt; catalyzed many “aha!” moments that I had when sifting through the codebase.&lt;/p&gt;

&lt;h2 id=&quot;vertically-centering-views--vertically-centering-divs&quot;&gt;Vertically Centering Views &amp;gt; Vertically Centering Divs&lt;/h2&gt;

&lt;p&gt;The first pull requests I submitted to Medium’s codebase were changes to the application view, or the user interface. At that point, I still felt iffy about my Objective-C skills, so it was nice to be able to visualize what I created by running the iOS simulator.&lt;/p&gt;

&lt;p&gt;The thing that struck me most about front-end iOS development was how &lt;em&gt;straightforward&lt;/em&gt; and &lt;em&gt;pleasant&lt;/em&gt; vertical alignment felt. I swear that I have to Google how to vertically center a div (or other CSS element) every couple of months. &lt;code class=&quot;highlighter-rouge&quot;&gt;text-align&lt;/code&gt; is memorable, but &lt;a href=&quot;https://stackoverflow.com/questions/396145/how-to-vertically-center-a-div-for-all-browsers&quot;&gt;the witchcraft StackOverflow comes up with&lt;/a&gt; to achieve vertical alignment is too much for my mind.&lt;/p&gt;

&lt;p&gt;Somehow, in Objective-C, vertical alignment becomes a carefree pastime. To vertically center a &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;, all I need to do is grab the &lt;code class=&quot;highlighter-rouge&quot;&gt;midY&lt;/code&gt; – the Y-coordinate at the center of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; – and slap the &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; on top of it.&lt;/p&gt;

&lt;p&gt;Of all the wonderful aspects of iOS development, the ease of vertical alignment tops the list. It’s the simple things that warmed me up to this new language.&lt;/p&gt;

&lt;h2 id=&quot;delegating-duties&quot;&gt;Delegating Duties&lt;/h2&gt;

&lt;p&gt;In my fourth week at Medium, I picked up a task that centered around creating a new view and its corresponding logic to certain Medium stories. I knew the basics of model-view-controller (MVC) – or, at least, which of the model, view, and controller can communicate with one another – but only at a conceptual level.&lt;/p&gt;

&lt;p&gt;I remember reading that the controller can set and update the view. This is the case in Medium’s codebase: for a given class, the controller instantiates a view object.&lt;/p&gt;

&lt;p&gt;When I had to create a button, however, I realized that I had no clue how to pass information back up from the view to the controller. Wouldn’t it be bad to make the view depend on the controller and the controller depend on the view?&lt;/p&gt;

&lt;p&gt;After some documentation hunting, I found out about &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html&quot;&gt;delegates&lt;/a&gt;. I learned that I could create a delegate that represents the controller so that I could access controller messages (methods) in the view. Using this delegate, I was able to seamlessly hook up a user’s button press action to trigger the appropriate controller method.&lt;/p&gt;

&lt;p&gt;To me, an iOS novice, delegation still feels like a cool trick for passing information up the application hierarchy. Weaving delegates up a chain of views and controllers had the added benefit of making me feel more comfortable with the structure of Medium’s codebase.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I noticed that an &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMVerify&lt;/code&gt; test that wasn’t passing after I made some changes to a message. I had added a new parameter to that message, and now, this &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMVerify&lt;/code&gt; test was highlighted in an ugly Xcode red.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OCMVerify&lt;/code&gt; is a message in the open source iOS testing library &lt;a href=&quot;https://github.com/erikdoe/ocmock&quot;&gt;OCMock&lt;/a&gt;. OCMock. The word “mock” in OCMock refers to a technique in testing in which the programmer tests units (objects, messages, etc.) that are similar to the given unit, but with fake, oversimplified dependencies. A mock unit is an imitation of that unit.&lt;/p&gt;

&lt;p&gt;The test that I had made fail instantiated a mock message and then used &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMVerify&lt;/code&gt; to ensure that the messaged had been called. What I found fascinating about this is that the ability to check if a message has been called means that these Objective-C tests can detect changes at &lt;em&gt;run-time&lt;/em&gt;. How rad is that?&lt;/p&gt;

&lt;p&gt;Back to my failing test. Upon researching the purpose of &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMVerify&lt;/code&gt;, I fixed up the test case by adding in a new parameter to the mock message that accepted any type of object. This allowed me to account for the places in the code where this parameter was nil. Upon recompiling the tests re-testing, this unit test passed!&lt;/p&gt;

&lt;p&gt;I had seen mocking and unit testing in previous web development internships, but parsing through the &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMock&lt;/code&gt; library and seeing how it has been used in Medium’s iOS codebase hammered home the concepts. But, to be fair, these recent testing epiphanies may be due to Xcode’s unusually comprehensible error messages rather than the superiority of iOS development tests.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Though my learnings have felt small in the moment, writing them down sequentially demonstrates the sheer breadth of the iOS skills that I’ve gained in a short period of time. I’ve covered a lot of ground in iOS development, which means that I’m now asking as many questions of breadth (what is &lt;a href=&quot;https://developer.apple.com/documentation/dispatch&quot;&gt;Grand Central Dispatch&lt;/a&gt;?) as of depth (behind the abstractions, how does Grand Central Dispatch work?).&lt;/p&gt;

&lt;p&gt;I mentioned Grand Central Dispatch (GCD) because that’s the next iOS concept that I’m mentally tackling. I look forward to the rabbit hole that I’ll fall down while learning about it, and the cascading growth I’ll experience as an iOS engineer from learnings like GCD and beyond.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Oct 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/10/09/apples.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/10/09/apples.html</guid>
        
        
      </item>
    
      <item>
        <title>Thinking Inside the Box</title>
        <description>&lt;p&gt;It’s been a little over a month (!!) since I started working at Medium. I’ve made it through the “I know absolutely nothing” phase, and now I’d place myself on the gradual upward curve of the &lt;a href=&quot;https://i.stack.imgur.com/aW6bZ.png&quot;&gt;Dunning-Kruger effect graph&lt;/a&gt;… but still near the bottom of that slope of enlightenment.&lt;/p&gt;

&lt;p&gt;One month in, I have a gained a better grasp on what I do and don’t know.&lt;/p&gt;

&lt;p&gt;Becoming cognizant of the limits of my knowledge has paradoxically made me feel more independent. In my third or fourth week, I noticed that I was able to work through tasks and build features myself. I can whip up a solution in code on my own.&lt;/p&gt;

&lt;p&gt;As proud as that makes me feel, I am aware that my solutions aren’t always the best solutions. In fact, they are often &lt;em&gt;not&lt;/em&gt; the best solutions. Sometimes my solutions fall flat because I don’t develop them within well-thought-out problem-solving &lt;strong&gt;constraints&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You bet I just emboldened constraints for a reason. I’ve long been told that “experience” distinguishes senior software engineers from their junior counterparts, but I never understood what “experience” meant. I abstractly thought that more years of engineering meant a greater likelihood of exposure to a panoply of problems, which in turn generated the skills to handle those problems.&lt;/p&gt;

&lt;p&gt;But, last week, I realized that you don’t become a senior software engineer just by existing in the industry for a certain number of years. &lt;strong&gt;Senior software engineers are unique in that they have ample experience in determining which rules they must abide by—and which ones they can break—when solving a problem&lt;/strong&gt;. Within these constraints, they are able to create code as beautiful as it is functional.&lt;/p&gt;

&lt;p&gt;Here are a few examples of what I call constraints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This method must utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; to its fullest.&lt;/li&gt;
  &lt;li&gt;This codebase must abide by the model-view-controller pattern.&lt;/li&gt;
  &lt;li&gt;This UI element must be able to load in X milliseconds so that the user isn’t left hanging.&lt;/li&gt;
  &lt;li&gt;This feature must be built with the smallest amount of new code possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why do constraints matter? Well, just as a painter might constrain herself to a canvas of a given size, an engineer who places constraints on a problem must be thoughtful about her solution. &lt;strong&gt;Using constraints ensures that an engineer will come up with a solution that obeys the appropriate regulations, yes, but also one that will push them to their limits&lt;/strong&gt;. Thinking &lt;em&gt;inside&lt;/em&gt; of the box fosters both resourcefulness and creativity.&lt;/p&gt;

&lt;p&gt;Let me illustrate the difference that constraints make in problem-solving.&lt;/p&gt;

&lt;p&gt;When I solve problems, I have trouble wrapping my head around many constraints at once. Maybe I write code that matches a design spec but that takes too long to render. Maybe I wrote a method that uses dependency injection, but it over-communicates the details by instantiating unnecessary variables.&lt;/p&gt;

&lt;p&gt;So far, I haven’t been able to cater to all the right constraints ahead of time. When I submit a pull request for review, it gets flooded with suggestions for improvement.&lt;/p&gt;

&lt;p&gt;When a senior engineer takes on a problem, she reflects upon multiple constraints for a while before even touching the keyboard. Some examples of constraint-building actions include drawing a diagram of how a new button should handle touch events, asking questions of a designer about a design spec, and searching for existing, similar code to see how other engineers before her have solved a given problem.&lt;/p&gt;

&lt;p&gt;Scoping out a problem with constraints leads to senior engineers producing pull requests that require less iteration than my own because they found a more optimal solution early on. Setting constraints allows them to solve problems more efficiently than me.&lt;/p&gt;

&lt;p&gt;I conclude that &lt;strong&gt;well-scoped constraints set senior engineers apart from junior engineers&lt;/strong&gt;, so they’re something that junior engineers like myself should start to incorporate into our workflow.&lt;/p&gt;

&lt;p&gt;Going forward, I intend to reflect upon as many constraints as I can think of before I write code. As I mentioned in a &lt;a href=&quot;https://alainakafkes.github.io/chronicles/2017/08/28/feelings.html&quot;&gt;previous blog post&lt;/a&gt;, I write down accomplishments, lessons, and TODOs at the end of every day. I’ll extend this habit by writing down constraints for the problem, feature, or issue that I’m working on in order to scope it out early on.&lt;/p&gt;

&lt;p&gt;I challenge all the junior engineers out there to join me in thinking inside the box (of constraints), too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/09/25/constraints.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/09/25/constraints.html</guid>
        
        
      </item>
    
      <item>
        <title>On Self-Advocacy</title>
        <description>&lt;p&gt;I’ve been thinking a lot about self-advocacy lately.&lt;/p&gt;

&lt;p&gt;I feel lucky to be at Medium—where I have incredible mentors who have been helping me grow as an engineer, as well as the opportunity to work on a product I care about—but sometimes I forget that &lt;em&gt;I&lt;/em&gt; am an asset, too. I’ve struggled to balance gratitude with confidence.&lt;/p&gt;

&lt;p&gt;It may seem that all that glitters is gold in tech; the perks of working at a tech company in San Francisco are &lt;em&gt;outrageous&lt;/em&gt;. (Especially that tech company avocado stash because WOW. I can never refuse a Californian avocado!)&lt;/p&gt;

&lt;p&gt;But beneath the veneer of casual excess, I know that women and other underrepresented folks have &lt;a href=&quot;https://medium.com/@amelielamont/not-a-black-chair-8a8e7e2b9140&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&quot;&gt;screwed&lt;/a&gt; by this industry before.&lt;/p&gt;

&lt;p&gt;With this in mind, &lt;strong&gt;I advocate for myself early and often&lt;/strong&gt;. I want to persevere, and I want other underrepresented people in tech to succeed, too.&lt;/p&gt;

&lt;p&gt;In the spirit of our ongoing tenacity, I’ve written two vignettes about my self-advocacy at Medium, and a bonus one from &lt;a href=&quot;https://wafflejs.com/&quot;&gt;WaffleJS&lt;/a&gt;. At the end of each vignette, I share a takeaway about self-advocacy.&lt;/p&gt;

&lt;h2 id=&quot;leveling-up-&quot;&gt;Leveling Up 🔝&lt;/h2&gt;

&lt;p&gt;My engineering manager and I had a conversation about my level, which measures my expertise and, fittingly, my salary. Since I had just started to work two weeks prior, my level had been pre-determined in my offer letter. My manager nevertheless sat me down to go through the leveling system with her.&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised to discover that the leveling system treats engineers as full-on &lt;em&gt;humans&lt;/em&gt; rather than code monkeys. To increase one’s level, an engineer needs to demonstrate not only improvements in their technical skills but also in their “soft” skills, such as initiative, communications, mentorship, et cetera.&lt;/p&gt;

&lt;p&gt;(Take note of the quotations because “soft” skills can be the hard ones!)&lt;/p&gt;

&lt;p&gt;Though I feel quite green as a software engineer—especially one who is currently working on iOS—I knew that my past work in developer evangelism and community-building could give me an edge in many of the “soft” skill categories that go into calculating an engineer’s level.&lt;/p&gt;

&lt;p&gt;I asked my engineering manager if I could take my ample experience in these “soft” skills into account on my next level assessment, and she responded with an emphatic yes. She suggested that, since that the Medium engineering leadership didn’t know me while I was in college, I should go out of my way to give them detailed examples of how I demonstrated these skills.&lt;/p&gt;

&lt;p&gt;I hadn’t expected such an enthusiastic response, but I loved it! Besides reminding me that advocating for myself is the clear-cut &lt;em&gt;right&lt;/em&gt; thing to do, my engineering manager took it a step further by giving me concrete advice on how to make my “soft” skills shine in my next assessment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-advocacy is letting others know the awesome things you’ve done.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;speaking-up-&quot;&gt;Speaking Up 💬&lt;/h2&gt;

&lt;p&gt;I picked up a small feature that I wanted to work on a few days ago, and then cringed in horror at the design mock for it. The mock no longer made sense in the context of new design decisions that had recently been made.&lt;/p&gt;

&lt;p&gt;I spun up a quick version of the feature, and then showed it two more senior engineers. I then spoke my piece about why it felt out place, redundant even. Though I’m a junior engineer, I know that I have a stake on what direction the iOS app should be taking.&lt;/p&gt;

&lt;p&gt;The conversation that ensued confirmed my feelings that the feature was redundant, yes, but my fellow iOS engineers showed me that it was merely a placeholder for a better-designed feature with more sensible functionality. They suggested that, since I had taken the initiative to build out the essence of the feature, I should build the new design as well.&lt;/p&gt;

&lt;p&gt;This will be the most complicated iOS task I’ve done at Medium so far, and the chance to tackle it came from speaking up to my co-workers with my design opinions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-advocacy opens doors to opportunity.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;standing-up-&quot;&gt;Standing Up 🙋🏻&lt;/h2&gt;

&lt;p&gt;On Wednesday night, I nervously ambled into a gaggle of food trucks looking for a meetup called WaffleJS. I had applied to speak at WaffleJS about &lt;a href=&quot;https://medium.com/@alainakafkes/on-literature-linked-lists-6730308a0d81&quot;&gt;how reading equips engineers to better do their jobs&lt;/a&gt;, and magically got my talk accepted despite being new to the meetup and to San Francisco.&lt;/p&gt;

&lt;p&gt;After bantering with a handful of other attendees and eating doughnuts (surprise!), I got up on stage to give the first talk of the evening to ~75 people, the largest audience I have ever spoken in front of to date.&lt;/p&gt;

&lt;p&gt;And, what do you know: my talk was well-received! My favorite memory of it was when I dropped what was (in my opinion) my most powerful line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Though we tend to praise ‘geniuses’ in the tech industry, I believe that we should just as strongly exalt people who are curious.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I heard applause and &lt;em&gt;cheers&lt;/em&gt; of affirmation. Damn, did that warm my heart.&lt;/p&gt;

&lt;p&gt;Several attendees introduced themselves to me throughout the meetup and told me about things in my talk that had struck them. I even received some book recommendations!&lt;/p&gt;

&lt;p&gt;Although technical speaking isn’t everyone’s cup of tea, it’s something I find quite fun. I received encouragement from WaffleJS to keep creating spoken and written technical content—encouragement I would never have received if I hadn’t sent that fateful email to the organizers in July.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-advocacy is stepping out of your comfort zone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/09/11/self-advocacy.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/09/11/self-advocacy.html</guid>
        
        
      </item>
    
      <item>
        <title>Feelings from the First Week</title>
        <description>&lt;p&gt;My first week as a software engineer has been an utter whirlwind. I’ll &lt;em&gt;chronicle&lt;/em&gt; (ba-dum tss!) some of the emotions I underwent below, and then list my learnings.&lt;/p&gt;

&lt;h2 id=&quot;lonely-&quot;&gt;Lonely 😞&lt;/h2&gt;

&lt;p&gt;Last Saturday, my flight touched down in Oakland International Airport. It wasn’t until then that the whole “new job, new city” thing &lt;em&gt;truly&lt;/em&gt; hit me.&lt;/p&gt;

&lt;p&gt;My start date was a mere two days later in San Francisco, a city in which I know only a handful of acquaintances. I was lucky that my family flew out with me to the Bay Area; without them present, my sense of aloneness and insignificance would have felt more oppressive. RIP.&lt;/p&gt;

&lt;h2 id=&quot;self-righteous-&quot;&gt;Self-Righteous 🙄&lt;/h2&gt;

&lt;p&gt;When I took the BART on Monday morning, I experienced the nagging sensation of being an outsider looking in. From the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bay_Area_Rapid_Transit&quot;&gt;BART&lt;/a&gt; to the bridges, everything about the Bay Area seemed… wrong. I kept comparing things to Chicago, lamenting ad nauseam that &lt;a href=&quot;https://en.wikipedia.org/wiki/Chicago_%22L%22&quot;&gt;the L&lt;/a&gt; is cheaper than the BART and that Chicago’s summer weather was better than Berkeley’s. I doubted that San Francisco could ever feel like home.&lt;/p&gt;

&lt;h2 id=&quot;nervous-&quot;&gt;Nervous 😖&lt;/h2&gt;

&lt;p&gt;Needless to say, I had reduced myself to a pipsqueak-ish person by the time I walked in the door at work. I work at &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;, a company with less than 100 employees, so my Chicagoan grievances turned into nervousness about fitting in with such a small group and adding value to the product.&lt;/p&gt;

&lt;h2 id=&quot;welcomed-&quot;&gt;Welcomed 😍&lt;/h2&gt;

&lt;p&gt;Looking back, my apprehension was understandable but overblown. My team welcomed me with open arms. There was a box of my favorite snacks (!!!) and swag awaiting me on my desk. Even when my mentor went on a brief vacation, every other engineer on my team offered to &lt;a href=&quot;https://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair&lt;/a&gt; with me and answer my questions until I got ramped up.&lt;/p&gt;

&lt;p&gt;Team aside, I’ve been able to eat lunch and talk with not only my new grad cohort, but also ~10-15 more experienced Medium employees. My engineering manager took me to the lovely &lt;a href=&quot;https://www.ashateahouse.com/&quot;&gt;Asha Tea House&lt;/a&gt; for our first one-on-one, which got me hooked on boba and established a comfortable manager-engineer relationship. Double win.&lt;/p&gt;

&lt;h2 id=&quot;lucky-&quot;&gt;Lucky 😇&lt;/h2&gt;

&lt;p&gt;If everyone at Medium has one thing in common, it’s friendliness. This has been said time and time again, but it’s worth repeating: &lt;strong&gt;work culture matters&lt;/strong&gt;. As a newcomer to this city, this company, and this line of work, feeling happy and safe at work is a blessing and a privilege.&lt;/p&gt;

&lt;h2 id=&quot;confused-&quot;&gt;Confused 🤔&lt;/h2&gt;

&lt;p&gt;Of course, not everything about my first full-time engineering job is peachy. I’m currently working on Medium iOS, and, because my iOS development experience has only been with personal projects, Medium’s vast codebase intimidates the &lt;em&gt;hell&lt;/em&gt; out of me. Fortunately, my fellow iOS engineers have been more than willing to bring me back to the light when I get lost in its depths.&lt;/p&gt;

&lt;h2 id=&quot;proud-&quot;&gt;Proud 😎&lt;/h2&gt;

&lt;p&gt;Despite my newness to the iOS codebase, I added a small feature that will soon be in production and now I’m working on a second! First &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;PRs&lt;/a&gt; have been a big milestone for me ever since I started contributing to open source, so I celebrated the moment my first contribution was approved.&lt;/p&gt;

&lt;h2 id=&quot;educational-&quot;&gt;Educational 🤓&lt;/h2&gt;

&lt;p&gt;Aha. You made it to the last of my emotions! Now, I’ll share with &lt;em&gt;you&lt;/em&gt; some of my takeaways from my first week that I think any engineer – perhaps any human? – can learn from.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ask questions.&lt;/strong&gt; Admitting confusion can be a hard step, especially for new engineers who feel self-conscious about not living up to the high expectations that got them hired. Because I’m cognizant of this feeling, I challenge myself to ask questions, because, without them, my growth would be greatly impeded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give small companies a chance.&lt;/strong&gt; Medium is the first small tech company I’ve ever worked at, and so far, I &lt;em&gt;really&lt;/em&gt; like how flexible the teams are and that I’ve already met most of the employees. I anticipate having a highly personalized engineering experience that stretches me where I want to grow, which often doesn’t happen at larger companies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check in and check out.&lt;/strong&gt; At the end of each day, I write down what I accomplished and what I’d like to accomplish the next day. This has helped me track my progress and remember where I left off, which has improved my productivity. Plus, taking a break from my laptop to write in a journal feels &lt;em&gt;really&lt;/em&gt; nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Say yes!&lt;/strong&gt; Nope, not &lt;a href=&quot;https://www.youtube.com/watch?v=9ExHqF1CDkc&quot;&gt;to the dress&lt;/a&gt;, but to going with your co-workers to do things! This week, I’ve said yes to getting lunch with someone I didn’t know, hunting down food trucks, and picking out team snacks at Trader Joe’s. Taking up these invitations has been quite conducive to having conversations about the non-work part of my co-workers’ lives, which makes me feel even more comfortable at Medium.&lt;/p&gt;

&lt;h2 id=&quot;settled-&quot;&gt;Settled 😌&lt;/h2&gt;

&lt;p&gt;I lied, there’s a bonus emotion.&lt;/p&gt;

&lt;p&gt;I’ve had a exciting (albeit turbulent!) first week that turned into a weekend full of meeting up with friends old and new. I’m starting to feel more settled as new engineer and new San Franciscan.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/08/28/feelings.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/08/28/feelings.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to the Chronicles</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“To write, you have to want something to survive you.” -Elena Ferrante&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;August marks the one year anniversary of my first-ever blog post. Admittedly, it took me &lt;em&gt;weeks&lt;/em&gt; to work up the guts to press “publish.”&lt;/p&gt;

&lt;p&gt;Though I’ve been praised for my way with words since my elementary school days, the fear that my words would be for naught made (and still makes) me nervous. Everything else I’d ever written had a clear-cut audience—like a journal entry or a professor-assigned exegesis—but forecasting whether my &lt;a href=&quot;https://medium.com/ladies-storm-hackathons/the-gender-gap-as-told-by-data-71dfce420519&quot;&gt;first blog post&lt;/a&gt; would be of any help was daunting.&lt;/p&gt;

&lt;p&gt;I can tell that I’ve matured over the past year because I’ve learned and reaffirmed with every blog post that my writing is as much for others as it is for &lt;em&gt;me&lt;/em&gt;. &lt;strong&gt;I like my writing best when it has the dual purpose of supporting my self-reflection and helping others learn something&lt;/strong&gt;. Even if only one of these purposes is achieved, my words are worthwhile.&lt;/p&gt;

&lt;p&gt;I’m about to embark upon a new phase of my life: my first full-time job. I believe that any big change in one’s life demands self-reflection, and, for me, that means writing.&lt;/p&gt;

&lt;p&gt;That’s why I’m starting a new blog: Chronicles of a Junior Dev. Welcome! 👋&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chronicles of a Junior Dev will be a bi-weekly log of experiences, misadventures, and takeaways from my first year as a software engineer&lt;/strong&gt;. As all good engineers must document the changes they make to a codebase, I plan to fully document my on-the-job growth.&lt;/p&gt;

&lt;p&gt;Besides self-reflection, I anticipate that Chronicles of a Junior Dev will also be a space for up-and-comers to witness what it’s like to foray into the tech industry. &lt;strong&gt;I believe that beginners—like me, a new engineer—share the best advice because they remember exactly what it’s like to start from the bottom&lt;/strong&gt;. By reading Chronicles of a Junior Dev, I hope that budding engineers can learn from me.&lt;/p&gt;

&lt;p&gt;So join me in my journey from software engineering novice to… well, who knows? Expect new installments in this nail-biter of a life story on every other Monday. 🙀&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be updated about new posts in the Chronicles of a Junior Dev saga, follow me on &lt;a href=&quot;https://twitter.com/alainakafkes&quot;&gt;Twitter&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/chronicles/2017/08/14/welcome.html</link>
        <guid isPermaLink="true">http://localhost:4000/chronicles/2017/08/14/welcome.html</guid>
        
        
      </item>
    
  </channel>
</rss>
